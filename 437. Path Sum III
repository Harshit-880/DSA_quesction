/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int total = 0;

public:
    int pathSum(TreeNode* root, int sum) {
        if (root == nullptr)
            return 0;
        std::unordered_map<long long, int> hm;
        hm[0] = 1;
        findPathSum(root, 0, sum, hm);
        return total;
    }

private:
    void findPathSum(TreeNode* curr, long long currSum, int target, std::unordered_map<long long, int>& hm) {
        if (curr == nullptr)
            return;

        currSum += curr->val;

        if (hm.find(currSum - target) != hm.end()) {
            total += hm[currSum - target];
        }

        hm[currSum] = hm[currSum] + 1;

        findPathSum(curr->left, currSum, target, hm);
        findPathSum(curr->right, currSum, target, hm);

        hm[currSum] = hm[currSum] - 1;
    }
};
