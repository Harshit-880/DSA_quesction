class Solution {
public:

    int fun(int curr,int prev,vector<int>& nums,vector<vector<int>> & dp){
        int n=nums.size();
        if(curr==n) return 0;
        if(dp[curr][prev+1]!=-1) return dp[curr][prev+1];
        int nottake=0+fun(curr+1,prev,nums,dp);
        int take=INT_MIN;
        if(prev==-1 || (nums[curr]>nums[prev] && (curr==n-1 || nums[curr+1]<nums[curr])) // bit confusion in this line 
        || (nums[curr]<nums[prev] && (curr==n-1 || nums[curr+1]>nums[curr])) ){
            take=1+fun(curr+1,curr,nums,dp);
        }
        return dp[curr][prev+1]=max(take,nottake);
    }

    int wiggleMaxLength(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> dp(n,vector<int>(n+1,-1));
        return fun(0,-1,nums,dp);
    }
};




// better approch 

class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int size = nums.size();
        vector<vector<int>> dp(size, vector<int>(2,1));
        // dp[x][0] pre down
        // dp[x][1] pre up

        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > nums[i-1]) {
                dp[i][1] = dp[i-1][0]+1;
            } else {
                dp[i][1] = dp[i-1][1];
            }
            if (nums[i] < nums[i-1]) {
                dp[i][0] = dp[i-1][1]+1;
            } else {
                dp[i][0] = dp[i-1][0];
            }
        }
        return max(dp[size-1][0], dp[size-1][1]);  
    }
};



