class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (!head) return nullptr;

        unordered_map<Node*, Node*> oldToNew;

        // First pass: Create new nodes
        Node* temp = head;
        while (temp) {
            oldToNew[temp] = new Node(temp->val);
            temp = temp->next;
        }

        // Second pass: Connect next and random pointers
        temp = head;
        while (temp) {
            oldToNew[temp]->next = oldToNew[temp->next];
            oldToNew[temp]->random = temp->random ? oldToNew[temp->random] : nullptr;
            temp = temp->next;
        }

        return oldToNew[head];
    }
};
