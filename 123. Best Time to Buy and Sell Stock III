class Solution {
public:

    int rec(vector<int>& prices,int inx,int buy,int cap,vector<vector<vector<int>>> &dp){
        if(inx==prices.size()) return 0;
        if(cap==0) return 0;
        if(dp[inx][buy][cap]!=-1) return dp[inx][buy][cap];
        if(buy==1){
           return dp[inx][buy][cap]= max(-prices[inx]+rec(prices,inx+1,0,cap,dp),rec(prices,inx+1,1,cap,dp));
        }
        else{
            return dp[inx][buy][cap]= max(prices[inx]+rec(prices,inx+1,1,cap-1,dp),rec(prices,inx+1,0,cap,dp));
        }
    }

    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
        return rec(prices,0,1,2,dp);

    }
};
