class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<int>> dist(n, vector<int>(k + 2, 1e9));
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        dist[src][0] = 0;
        pq.push({0, {src, 0}});

        using InnerArray = array<int, 2>;
        vector<vector<InnerArray>> Vec(n);
        for(int i = 0; i < flights.size(); i++){
            Vec[flights[i][0]].push_back({flights[i][1], flights[i][2]});
        }
        
        while(!pq.empty()){
            int wt = pq.top().first;
            int node = pq.top().second.first;
            int stops = pq.top().second.second;
            pq.pop();
            
            if (stops > k) continue;
            
            for(auto it: Vec[node]){
                int edge = it[0];
                int edgewt = it[1];
                
                if (wt + edgewt < dist[edge][stops + 1]) {
                    dist[edge][stops + 1] = wt + edgewt;
                    pq.push({wt + edgewt, {edge, stops + 1}});
                }
            }
        }
        
        int ans = 1e9;
        for (int i = 0; i <= k + 1; i++) {
            ans = min(ans, dist[dst][i]);
        }
        
        return (ans == 1e9) ? -1 : ans;
    }
};
