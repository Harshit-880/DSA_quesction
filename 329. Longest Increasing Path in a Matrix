class Solution {
public:
    int drow[4]={0,1,0,-1};
    int dcol[4]={1,0,-1,0};

    int dfs(int i,int j,vector<vector<int>>& matrix,vector<vector<int>> &memo){
        int n=matrix.size();
        int m=matrix[0].size();
        int sum=1;
        if(memo[i][j]!=-1)
            return memo[i][j];
        for(int k=0;k<4;k++){
            int row=drow[k]+i;
            int col=dcol[k]+j;
            if(row>=0 and col>=0 and row<n and col<m and matrix[row][col]>matrix[i][j]){
                
                sum=max(sum,1+dfs(row,col,matrix,memo));
            }
        }
        return memo[i][j]=sum;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int count=0;
        vector<vector<int>>memo(n,vector<int>(m,-1));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                count=max(count,dfs(i,j,matrix,memo));
            }
        }
        return count;
    }
};
